{
	"button": {
		"root": [
			{
				"fileName": "block.json",
				"content": "{\r\n\t\"$schema\": \"https://json.schemastore.org/block.json\",\r\n\t\"apiVersion\": 2,\r\n\t\"name\": \"storybook/button\",\r\n\t\"title\": \"Button\",\r\n\t\"icon\": \"money-alt\",\r\n\t\"category\": \"storybook\",\r\n\t\"attributes\": {\r\n\t\t\"text\": {\r\n\t\t\t\"type\": \"object\"\r\n\t\t}\r\n\t},\r\n\t\"editorScript\": \"file:index.js\",\r\n\t\"editorStyle\": \"file:index.css\",\r\n\t\"style\": \"file:style-index.css\",\r\n\t\"viewScript\": \"file:script.js\"\r\n}\r\n"
			},
			{
				"fileName": "index.php",
				"content": "<?php\r\n\r\nnamespace Storybook\\Blocks\\Button;\r\n\r\ndefined( 'ABSPATH' ) || exit;\r\n\r\n/**\r\n * Registers all block assets so that they can be enqueued through Gutenberg in\r\n * the corresponding context.\r\n *\r\n */\r\nfunction register_block() {\r\n\r\n\t// Register the block by passing the location of block.json to register_block_type.\r\n\tregister_block_type(\r\n\t\t__DIR__,\r\n\t\tarray(\r\n\t\t\t'render_callback' => __NAMESPACE__ . '\\\\render_block',\r\n\t\t)\r\n\t);\r\n}\r\n\r\nadd_action( 'init', __NAMESPACE__ . '\\\\register_block' );\r\n\r\nfunction render_block( $attributes, $content, $block ) {\r\n\tob_start(); ?>\r\n\r\n\t<Button>123</Button>\r\n\r\n <?php \t\r\n return ob_get_clean();\r\n}"
			}
		],
		"javascript": [
			{
				"fileName": "edit.js",
				"content": "/**\n * React dependency\n */\nimport React from 'react';\n/**\n * WordPress dependencies\n */\nimport { Button as GButton } from '@wordpress/components';\nconst Button = ({ ...props }) => {\n    return <GButton {...props}/>;\n};\nexport default Button;\n"
			},
			{
				"fileName": "index.js",
				"content": "/**\n * WordPress dependencies\n */\nimport { registerBlockType } from '@wordpress/blocks';\n/**\n * Internal dependencies\n */\nimport json from './block.json';\nimport edit from './edit';\nimport save from './save';\n// If you want use styles, it add them to the current directory\n// import './editor.scss';\n// import './style.scss';\n// Destructure the json file to get the name and settings for the block\nconst blockConfig = json;\n// Ensure name is a string before calling registerBlockType\nif (typeof blockConfig.name === 'string') {\n    // Register the block with proper typing for block configuration\n    registerBlockType(blockConfig.name, {\n        ...blockConfig,\n        edit, // Object shorthand property - same as writing: edit: edit,\n        save, // Object shorthand property - same as writing: save: save,\n    });\n}\nelse {\n    console.error('Block name is undefined or not a string');\n}\n"
			},
			{
				"fileName": "save.js",
				"content": "/**\n * See https://wordpress.org/gutenberg/handbook/designers-developers/developers/block-api/block-edit-save/#save\n *\n * @return {null} Dynamic blocks do not save the HTML.\n */\nconst Save = () => null;\nexport default Save;\n"
			}
		],
		"typescript": [
			{
				"fileName": "edit.tsx",
				"content": "/**\r\n * React dependency\r\n */\r\nimport React, { ReactElement } from 'react';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport { Button as GButton } from '@wordpress/components';\r\nimport { ButtonProps } from './types';\r\n\r\nconst Button = ({ ...props }: ButtonProps): ReactElement => {\r\n\treturn <GButton {...props} />;\r\n};\r\n\r\nexport default Button;\r\n"
			},
			{
				"fileName": "index.ts",
				"content": "/**\r\n * WordPress dependencies\r\n */\r\nimport { BlockConfiguration, registerBlockType } from '@wordpress/blocks';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport json from './block.json';\r\nimport edit from './edit';\r\nimport save from './save';\r\n\r\n// If you want use styles, it add them to the current directory\r\n// import './editor.scss';\r\n// import './style.scss';\r\n\r\n// Destructure the json file to get the name and settings for the block\r\nconst blockConfig = json as BlockConfiguration;\r\n\r\n// Ensure name is a string before calling registerBlockType\r\nif (typeof blockConfig.name === 'string') {\r\n\t// Register the block with proper typing for block configuration\r\n\tregisterBlockType(blockConfig.name, {\r\n\t\t...blockConfig,\r\n\t\tedit, // Object shorthand property - same as writing: edit: edit,\r\n\t\tsave, // Object shorthand property - same as writing: save: save,\r\n\t});\r\n} else {\r\n\tconsole.error('Block name is undefined or not a string');\r\n}\r\n"
			},
			{
				"fileName": "save.ts",
				"content": "/**\r\n * See https://wordpress.org/gutenberg/handbook/designers-developers/developers/block-api/block-edit-save/#save\r\n *\r\n * @return {null} Dynamic blocks do not save the HTML.\r\n */\r\n\r\nconst Save = () => null\r\n\r\nexport default Save\r\n"
			}
		]
	},
	"toolbar": {
		"root": [
			{
				"fileName": "block.json",
				"content": "{\r\n\t\"$schema\": \"https://json.schemastore.org/block.json\",\r\n\t\"apiVersion\": 2,\r\n\t\"name\": \"storybook/toolbar\",\r\n\t\"title\": \"Toolbar\",\r\n\t\"icon\": \"money-alt\",\r\n\t\"category\": \"storybook\",\r\n\t\"attributes\": {\r\n\t\t\"text\": {\r\n\t\t\t\"type\": \"object\"\r\n\t\t}\r\n\t},\r\n\t\"editorScript\": \"file:index.js\",\r\n\t\"editorStyle\": \"file:index.css\",\r\n\t\"style\": \"file:style-index.css\",\r\n\t\"viewScript\": \"file:script.js\"\r\n}\r\n"
			},
			{
				"fileName": "index.php",
				"content": "<?php\r\n\r\nnamespace Storybook\\Blocks\\Toolbar;\r\n\r\ndefined( 'ABSPATH' ) || exit;\r\n\r\n/**\r\n * Registers all block assets so that they can be enqueued through Gutenberg\r\n * in the corresponding context.\r\n */\r\nfunction register_block() {\r\n\t// Register the block by passing the location of block.json to register_block_type\r\n\tregister_block_type(\r\n\t\t__DIR__,\r\n\t\tarray(\r\n\t\t\t'render_callback' => __NAMESPACE__ . '\\\\render_block',\r\n\t\t)\r\n\t);\r\n}\r\n\r\nadd_action( 'init', __NAMESPACE__ . '\\\\register_block' );\r\n\r\nfunction render_block( $attributes ) {\r\n\tob_start();\r\n\t?>\r\n\r\n\t<?php\r\n\treturn ob_get_clean();\r\n}\r\n"
			}
		],
		"javascript": [
			{
				"fileName": "edit.js",
				"content": "/**\n * React dependency\n */\nimport React from 'react';\n/**\n * WordPress dependencies\n */\nimport { DropdownMenu, Toolbar as GToolbar, ToolbarButton, ToolbarDropdownMenu, ToolbarGroup, ToolbarItem } from '@wordpress/components';\nimport { alignCenter, alignLeft, alignRight, arrowDown, arrowLeft, arrowRight, arrowUp, chevronDown, formatBold, formatItalic, link, more, paragraph, } from '@wordpress/icons';\n/** Primary UI component */\nconst Toolbar = () => {\n    return (<GToolbar label='Options'>\r\n\t\t\t<>\r\n\t\t\t\t<ToolbarGroup>\r\n\t\t\t\t\t<ToolbarButton icon={paragraph} text='Paragraph'/>\r\n\t\t\t\t</ToolbarGroup>\r\n\r\n\t\t\t\t<ToolbarGroup>\r\n\t\t\t\t\t<ToolbarItem>\r\n\t\t\t\t\t\t{toggleProps => (<DropdownMenu icon={alignLeft} label='Align' controls={[\n                {\n                    icon: alignLeft,\n                    title: 'Align left',\n                    isActive: true,\n                },\n                {\n                    icon: alignCenter,\n                    title: 'Align center',\n                },\n                {\n                    icon: alignRight,\n                    title: 'Align right',\n                },\n            ]} toggleProps={toggleProps}/>)}\r\n\t\t\t\t\t</ToolbarItem>\r\n\t\t\t\t</ToolbarGroup>\r\n\r\n\t\t\t\t<ToolbarGroup>\r\n\t\t\t\t\t<ToolbarButton>Text</ToolbarButton>\r\n\t\t\t\t\t<ToolbarButton icon={formatBold} label='Bold' isPressed/>\r\n\t\t\t\t\t<ToolbarButton icon={formatItalic} label='Italic'/>\r\n\t\t\t\t\t<ToolbarButton icon={link} label='Link'/>\r\n\t\t\t\t</ToolbarGroup>\r\n\r\n\t\t\t\t<ToolbarGroup icon={more} title='Align' isCollapsed controls={[\n            {\n                icon: alignLeft,\n                title: 'Align left',\n                isActive: true,\n            },\n            { icon: alignCenter, title: 'Align center' },\n            { icon: alignRight, title: 'Align right' },\n        ]}/>\r\n\r\n\t\t\t\t<ToolbarDropdownMenu icon={chevronDown} label='Select a direction' controls={[\n            {\n                title: 'Up',\n                icon: arrowUp,\n            },\n            {\n                title: 'Right',\n                icon: arrowRight,\n            },\n            {\n                title: 'Down',\n                icon: arrowDown,\n            },\n            {\n                title: 'Left',\n                icon: arrowLeft,\n            },\n        ]}/>\r\n\t\t\t</>\r\n\t\t</GToolbar>);\n};\nexport default Toolbar;\n"
			},
			{
				"fileName": "index.js",
				"content": "/**\n * WordPress dependencies\n */\nimport { registerBlockType } from '@wordpress/blocks';\n/**\n * Internal dependencies\n */\nimport json from './block.json';\nimport edit from './edit';\nimport save from './save';\n// import './editor.scss';\n// import './style.scss';\n// Destructure the json file to get the name and settings for the block\n// For more information on how this works, see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\nconst { name } = json;\n// Register the block\nregisterBlockType(name, {\n    edit, // Object shorthand property - same as writing: edit: edit,\n    save, // Object shorthand property - same as writing: save: save,\n});\n"
			},
			{
				"fileName": "save.js",
				"content": "/**\n * See https://wordpress.org/gutenberg/handbook/designers-developers/developers/block-api/block-edit-save/#save\n *\n * @return {null} Dynamic blocks do not save the HTML.\n */\nconst Save = () => null;\nexport default Save;\n"
			}
		],
		"typescript": [
			{
				"fileName": "edit.tsx",
				"content": "/**\r\n * React dependency\r\n */\r\nimport React, { ReactElement } from 'react';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport { DropdownMenu, Toolbar as GToolbar, ToolbarButton, ToolbarDropdownMenu, ToolbarGroup, ToolbarItem } from '@wordpress/components';\r\nimport {\r\n\talignCenter,\r\n\talignLeft,\r\n\talignRight,\r\n\tarrowDown,\r\n\tarrowLeft,\r\n\tarrowRight,\r\n\tarrowUp,\r\n\tchevronDown,\r\n\tformatBold,\r\n\tformatItalic,\r\n\tlink,\r\n\tmore,\r\n\tparagraph,\r\n} from '@wordpress/icons';\r\n\r\n/** Primary UI component */\r\nconst Toolbar = (): ReactElement => {\r\n\treturn (\r\n\t\t<GToolbar label='Options'>\r\n\t\t\t<>\r\n\t\t\t\t<ToolbarGroup>\r\n\t\t\t\t\t<ToolbarButton icon={paragraph} text='Paragraph' />\r\n\t\t\t\t</ToolbarGroup>\r\n\r\n\t\t\t\t<ToolbarGroup>\r\n\t\t\t\t\t<ToolbarItem>\r\n\t\t\t\t\t\t{toggleProps => (\r\n\t\t\t\t\t\t\t<DropdownMenu\r\n\t\t\t\t\t\t\t\ticon={alignLeft}\r\n\t\t\t\t\t\t\t\tlabel='Align'\r\n\t\t\t\t\t\t\t\tcontrols={[\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\ticon: alignLeft,\r\n\t\t\t\t\t\t\t\t\t\ttitle: 'Align left',\r\n\t\t\t\t\t\t\t\t\t\tisActive: true,\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\ticon: alignCenter,\r\n\t\t\t\t\t\t\t\t\t\ttitle: 'Align center',\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\ticon: alignRight,\r\n\t\t\t\t\t\t\t\t\t\ttitle: 'Align right',\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t]}\r\n\t\t\t\t\t\t\t\ttoggleProps={toggleProps}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</ToolbarItem>\r\n\t\t\t\t</ToolbarGroup>\r\n\r\n\t\t\t\t<ToolbarGroup>\r\n\t\t\t\t\t<ToolbarButton>Text</ToolbarButton>\r\n\t\t\t\t\t<ToolbarButton icon={formatBold} label='Bold' isPressed />\r\n\t\t\t\t\t<ToolbarButton icon={formatItalic} label='Italic' />\r\n\t\t\t\t\t<ToolbarButton icon={link} label='Link' />\r\n\t\t\t\t</ToolbarGroup>\r\n\r\n\t\t\t\t<ToolbarGroup\r\n\t\t\t\t\ticon={more}\r\n\t\t\t\t\ttitle='Align'\r\n\t\t\t\t\tisCollapsed\r\n\t\t\t\t\tcontrols={[\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ticon: alignLeft,\r\n\t\t\t\t\t\t\ttitle: 'Align left',\r\n\t\t\t\t\t\t\tisActive: true,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{ icon: alignCenter, title: 'Align center' },\r\n\t\t\t\t\t\t{ icon: alignRight, title: 'Align right' },\r\n\t\t\t\t\t]}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<ToolbarDropdownMenu\r\n\t\t\t\t\ticon={chevronDown}\r\n\t\t\t\t\tlabel='Select a direction'\r\n\t\t\t\t\tcontrols={[\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttitle: 'Up',\r\n\t\t\t\t\t\t\ticon: arrowUp,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttitle: 'Right',\r\n\t\t\t\t\t\t\ticon: arrowRight,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttitle: 'Down',\r\n\t\t\t\t\t\t\ticon: arrowDown,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttitle: 'Left',\r\n\t\t\t\t\t\t\ticon: arrowLeft,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t]}\r\n\t\t\t\t/>\r\n\t\t\t</>\r\n\t\t</GToolbar>\r\n\t);\r\n};\r\n\r\nexport default Toolbar;\r\n"
			},
			{
				"fileName": "index.ts",
				"content": "/**\r\n * WordPress dependencies\r\n */\r\nimport { registerBlockType } from '@wordpress/blocks';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport json from './block.json';\r\nimport edit from './edit';\r\nimport save from './save';\r\n\r\n// import './editor.scss';\r\n// import './style.scss';\r\n\r\n// Destructure the json file to get the name and settings for the block\r\n// For more information on how this works, see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\r\nconst { name } = json;\r\n\r\n// Register the block\r\nregisterBlockType(name, {\r\n\tedit, // Object shorthand property - same as writing: edit: edit,\r\n\tsave, // Object shorthand property - same as writing: save: save,\r\n});\r\n"
			},
			{
				"fileName": "save.ts",
				"content": "/**\r\n * See https://wordpress.org/gutenberg/handbook/designers-developers/developers/block-api/block-edit-save/#save\r\n *\r\n * @return {null} Dynamic blocks do not save the HTML.\r\n */\r\n\r\nconst Save = () => null;\r\n\r\nexport default Save;\r\n"
			}
		]
	},
	"link": {
		"root": [
			{
				"fileName": "block.json",
				"content": "{\r\n\t\"$schema\": \"https://json.schemastore.org/block.json\",\r\n\t\"apiVersion\": 2,\r\n\t\"name\": \"storybook/custom-link\",\r\n\t\"title\": \"Custom Link\",\r\n\t\"icon\": \"admin-links\",\r\n\t\"category\": \"storybook\",\r\n\t\"attributes\": {\r\n\t\t\"link\": {\r\n\t\t\t\"type\": \"object\",\r\n\t\t\t\"default\": {\r\n\t\t\t\t\"url\": \"\",\r\n\t\t\t\t\"title\": \"\",\r\n\t\t\t\t\"type\": \"URL\",\r\n\t\t\t\t\"opensInNewTab\": false\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"text\": {\r\n\t\t\t\"type\": \"string\",\r\n\t\t\t\"default\": \"Click here\"\r\n\t\t}\r\n\t},\r\n\t\"supports\": {\r\n\t\t\"customClassName\": true,\r\n\t\t\"multiple\": true\r\n\t},\r\n\t\"editorScript\": \"file:index.js\",\r\n\t\"editorStyle\": \"file:index.css\",\r\n\t\"style\": \"file:style-index.css\",\r\n\t\"viewScript\": \"file:script.js\"\r\n}\r\n"
			},
			{
				"fileName": "button.php",
				"content": "<?php\r\n/**\r\n * Button markup\r\n *\r\n * @var array $args\r\n */\r\n\r\n$text       = $args['text'] ?? esc_html__( 'Click here', 'rscm' );\r\n$tag        = $args['tag'] ?? 'a';\r\n$href       = $args['href'] ?? '#';\r\n$target     = $args['target'] ?? '';\r\n$rel        = $args['rel'] ?? '';\r\n$markup     = $args['markup'] ?? '';\r\n\r\n$content = '';\r\n\r\nif ( $markup ) {\r\n\t$content = $markup;\r\n} else {\r\n\t$content .= $text_class ? wp_sprintf( '<span class=\"%s\">%s</span>', $text_class, $text ) : $text;\r\n}\r\n?>\r\n\r\n<<?php echo wp_kses_post( $tag ); ?>\r\n\t<?php if ( $tag === 'a' ) : ?>\r\n\t\thref=\"<?php echo esc_url( $href ); ?>\"\r\n\t<?php endif; ?>\r\n\r\n\t<?php if ( $target ) : ?>\r\n\t\ttarget=\"<?php echo esc_attr( $target ); ?>\"\r\n\t<?php endif; ?>\r\n\r\n\t<?php if ( $rel ) : ?>\r\n\t\trel=\"<?php echo esc_attr( $rel ); ?>\"\r\n\t<?php endif; ?>\r\n\r\n\t<?php if ( $attrs ) : ?>\r\n\t\t<?php foreach ( $attrs as $key => $attr ) : ?>\r\n\t\t\t<?php echo wp_kses_post( $key ) . '=\"' . esc_attr( $attr ) . '\"'; ?>\r\n\t\t<?php endforeach; ?>\r\n\t<?php endif; ?>\r\n>\r\n<?php echo wp_kses_post( $content ); ?>\r\n</<?php echo wp_kses_post( $tag ); ?>>\r\n"
			},
			{
				"fileName": "index.php",
				"content": "<?php\r\n\r\nnamespace Storybook\\Blocks\\CustomLink;\r\n\r\ndefined( 'ABSPATH' ) || exit;\r\n\r\n/**\r\n * Registers all block assets so that they can be enqueued through Gutenberg\r\n * in the corresponding context.\r\n */\r\nfunction register_block() {\r\n\t// Register the block by passing the location of block.json to register_block_type\r\n\tregister_block_type(\r\n\t\t__DIR__,\r\n\t\tarray(\r\n\t\t\t'render_callback' => __NAMESPACE__ . '\\\\render_block',\r\n\t\t)\r\n\t);\r\n}\r\n\r\nadd_action( 'init', __NAMESPACE__ . '\\\\register_block' );\r\n\r\nfunction render_block( $attributes ) {\r\n\t$text     = $attributes['text'] ?? '';\r\n\t$url_date = $attributes['link'] ?? [];\r\n\r\n\tob_start();\r\n\t?>\r\n\t<p>\r\n\t\t<?php\r\n\t\tif ( $text ) :\r\n\t\t\t$url    = $url_date['url'] ?? '';\r\n\t\t\t$target = $url_date['opensInNewTab'] ?? false;\r\n\r\n\t\t\tget_template_part(\r\n\t\t\t\t'button',\r\n\t\t\t\tnull,\r\n\t\t\t\t[\r\n\t\t\t\t\t'href'   => ! empty( $url ) ? $url : '/',\r\n\t\t\t\t\t'target' => $target,\r\n\t\t\t\t\t'markup' => $text,\r\n\t\t\t\t]\r\n\t\t\t);\r\n\t\tendif;\r\n\t\t?>\r\n\t</p>\r\n\t<?php\r\n\treturn ob_get_clean();\r\n}\r\n"
			}
		],
		"javascript": [
			{
				"fileName": "edit.js",
				"content": "/**\n * React dependency\n */\nimport React, { useState } from 'react';\n/**\n * WordPress dependencies\n */\nimport { __experimentalLinkControl as LinkControl, RichText, useBlockProps } from '@wordpress/block-editor';\nimport { Popover, ToolbarButton } from '@wordpress/components';\nimport { BlockControls } from '@wordpress/editor';\nimport { __ } from '@wordpress/i18n';\nimport { customLink } from '@wordpress/icons';\nconst CustomLink = (props) => {\n    const { attributes: { link, text }, setAttributes, } = props;\n    const [isVisible, setIsVisible] = useState(true);\n    const toggleVisible = () => {\n        setIsVisible(state => !state);\n    };\n    return (<div {...useBlockProps()}>\r\n\t\t\t<BlockControls>\r\n\t\t\t\t<ToolbarButton className={'components-button-link'} label={__('Add link', 'rscm')} icon={customLink} onClick={toggleVisible}/>\r\n\t\t\t</BlockControls>\r\n\r\n\t\t\t<p className={'rscm-custom-link'}>\r\n\t\t\t\t<RichText placeholder={__('Add text...', 'rscm')} allowedFormats={['core/bold', 'core/italic']} onChange={text => setAttributes({ text })} value={text}/>\r\n\t\t\t</p>\r\n\r\n\t\t\t{isVisible && (<Popover onFocusOutside={toggleVisible}>\r\n\t\t\t\t\t<LinkControl value={link} onChange={link => {\n                setAttributes({ link });\n            }}/>\r\n\t\t\t\t</Popover>)}\r\n\t\t</div>);\n};\nexport default CustomLink;\n"
			},
			{
				"fileName": "index.js",
				"content": "/**\n * WordPress dependencies\n */\nimport { registerBlockType } from '@wordpress/blocks';\n/**\n * Internal dependencies\n */\nimport json from './block.json';\nimport edit from './edit';\nimport save from './save';\n// import './editor.scss';\n// import './style.scss';\n// Destructure the json file to get the name and settings for the block\n// For more information on how this works, see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\nconst { name } = json;\n// Register the block\nregisterBlockType(name, {\n    edit, // Object shorthand property - same as writing: edit: edit,\n    save, // Object shorthand property - same as writing: save: save,\n});\n"
			},
			{
				"fileName": "save.js",
				"content": "/**\n * See https://wordpress.org/gutenberg/handbook/designers-developers/developers/block-api/block-edit-save/#save\n *\n * @return {null} Dynamic blocks do not save the HTML.\n */\nconst Save = () => null;\nexport default Save;\n"
			}
		],
		"typescript": [
			{
				"fileName": "edit.tsx",
				"content": "/**\r\n * React dependency\r\n */\r\nimport React, { useState } from 'react';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport { __experimentalLinkControl as LinkControl, RichText, useBlockProps } from '@wordpress/block-editor';\r\nimport { Popover, ToolbarButton } from '@wordpress/components';\r\nimport { BlockControls } from '@wordpress/editor';\r\nimport { __ } from '@wordpress/i18n';\r\nimport { customLink } from '@wordpress/icons';\r\n\r\ninterface CustomLinkProps {\r\n\tattributes: {\r\n\t\tlink: string;\r\n\t\ttext: string;\r\n\t};\r\n\tsetAttributes: any;\r\n}\r\n\r\nconst CustomLink = (props: CustomLinkProps) => {\r\n\tconst {\r\n\t\tattributes: { link, text },\r\n\t\tsetAttributes,\r\n\t} = props;\r\n\r\n\tconst [isVisible, setIsVisible] = useState(true);\r\n\r\n\tconst toggleVisible = () => {\r\n\t\tsetIsVisible(state => !state);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div {...useBlockProps()}>\r\n\t\t\t<BlockControls>\r\n\t\t\t\t<ToolbarButton className={'components-button-link'} label={__('Add link', 'rscm')} icon={customLink} onClick={toggleVisible} />\r\n\t\t\t</BlockControls>\r\n\r\n\t\t\t<p className={'rscm-custom-link'}>\r\n\t\t\t\t<RichText\r\n\t\t\t\t\tplaceholder={__('Add text...', 'rscm')}\r\n\t\t\t\t\tallowedFormats={['core/bold', 'core/italic']}\r\n\t\t\t\t\tonChange={text => setAttributes({ text })}\r\n\t\t\t\t\tvalue={text}\r\n\t\t\t\t/>\r\n\t\t\t</p>\r\n\r\n\t\t\t{isVisible && (\r\n\t\t\t\t<Popover onFocusOutside={toggleVisible}>\r\n\t\t\t\t\t<LinkControl\r\n\t\t\t\t\t\tvalue={link}\r\n\t\t\t\t\t\tonChange={link => {\r\n\t\t\t\t\t\t\tsetAttributes({ link });\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Popover>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CustomLink;\r\n"
			},
			{
				"fileName": "index.ts",
				"content": "/**\r\n * WordPress dependencies\r\n */\r\nimport { registerBlockType } from '@wordpress/blocks';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport json from './block.json';\r\nimport edit from './edit';\r\nimport save from './save';\r\n\r\n// import './editor.scss';\r\n// import './style.scss';\r\n\r\n// Destructure the json file to get the name and settings for the block\r\n// For more information on how this works, see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\r\nconst { name } = json;\r\n\r\n// Register the block\r\nregisterBlockType(name, {\r\n\tedit, // Object shorthand property - same as writing: edit: edit,\r\n\tsave, // Object shorthand property - same as writing: save: save,\r\n});\r\n"
			},
			{
				"fileName": "save.ts",
				"content": "/**\r\n * See https://wordpress.org/gutenberg/handbook/designers-developers/developers/block-api/block-edit-save/#save\r\n *\r\n * @return {null} Dynamic blocks do not save the HTML.\r\n */\r\n\r\nconst Save = () => null;\r\n\r\nexport default Save;\r\n"
			}
		]
	},
	"multiselectdrag": {
		"root": [
			{
				"fileName": "block.json",
				"content": "{\r\n\t\"$schema\": \"https://json.schemastore.org/block.json\",\r\n\t\"apiVersion\": 2,\r\n\t\"name\": \"storybook/button\",\r\n\t\"title\": \"Button\",\r\n\t\"icon\": \"money-alt\",\r\n\t\"category\": \"storybook\",\r\n\t\"attributes\": {\r\n\t\t\"text\": {\r\n\t\t\t\"type\": \"object\"\r\n\t\t}\r\n\t},\r\n\t\"editorScript\": \"file:index.js\",\r\n\t\"editorStyle\": \"file:index.css\",\r\n\t\"style\": \"file:style-index.css\",\r\n\t\"viewScript\": \"file:script.js\"\r\n}\r\n"
			},
			{
				"fileName": "index.php",
				"content": "<?php\r\n\r\nnamespace Storybook\\Blocks\\Button;\r\n\r\ndefined( 'ABSPATH' ) || exit;\r\n\r\n/**\r\n * Registers all block assets so that they can be enqueued through Gutenberg in\r\n * the corresponding context.\r\n *\r\n */\r\nfunction register_block() {\r\n\r\n\t// Register the block by passing the location of block.json to register_block_type.\r\n\tregister_block_type(\r\n\t\t__DIR__,\r\n\t\tarray(\r\n\t\t\t'render_callback' => __NAMESPACE__ . '\\\\render_block',\r\n\t\t)\r\n\t);\r\n}\r\n\r\nadd_action( 'init', __NAMESPACE__ . '\\\\register_block' );\r\n\r\nfunction render_block( $attributes, $content, $block ) {\r\n\tob_start(); ?>\r\n\r\n\t<Button>123</Button>\r\n\r\n <?php \t\r\n return ob_get_clean();\r\n}"
			}
		],
		"javascript": [
			{
				"fileName": "edit.js",
				"content": "/**\n * React dependencies\n */\nimport React, { useState } from 'react';\n/**\n * External dependencies\n */\nimport { closestCenter, DndContext, KeyboardSensor, PointerSensor, useSensor, useSensors } from '@dnd-kit/core';\nimport { arrayMove, SortableContext, sortableKeyboardCoordinates, useSortable, verticalListSortingStrategy } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport Select, { components } from 'react-select';\nconst customStyles = {\n    multiValue: provided => ({\n        ...provided,\n        justifyContent: 'space-between',\n    }),\n    multiValueLabel: provided => ({\n        ...provided,\n        padding: '6px',\n    }),\n    valueContainer: provided => ({\n        ...provided,\n        padding: '2px 0 2px 8px',\n        gap: '3px',\n    }),\n    option: (provided, state) => ({\n        ...provided,\n        opacity: state.isDisabled ? '0.4' : '1',\n    }),\n};\nconst options = Array.from({ length: 10 }, (_, index) => ({\n    label: `option-${index}`,\n    value: `option-${index}`,\n}));\nconst SortableMultiValueLabel = (props) => {\n    const { attributes, listeners } = useSortable({ id: props.data.value });\n    return (<div style={{ width: '100%' }} {...attributes} {...listeners}>\r\n\t\t\t<components.MultiValueLabel {...props}/>\r\n\t\t</div>);\n};\nconst SortableMultiValue = (props) => {\n    const { setNodeRef, transform, transition } = useSortable({\n        id: props.data.value,\n    });\n    const style = {\n        display: 'flex',\n        alignItems: 'center',\n        transform: CSS.Transform.toString(transform),\n        transition,\n    };\n    return (<div ref={setNodeRef} style={style}>\r\n\t\t\t<components.MultiValue {...props}/>\r\n\t\t</div>);\n};\nconst MultiSelectDrag = ({ ...props }) => {\n    const [selected, setSelected] = useState(options);\n    const handleDragEnd = ({ active, over }) => {\n        if (active.id !== over?.id) {\n            const oldIndex = selected.findIndex(i => i.value === active.id);\n            const newIndex = over ? selected.findIndex(i => i.value === over.id) : selected.length - 1;\n            setSelected(arrayMove(selected, oldIndex, newIndex));\n        }\n    };\n    const sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor, {\n        coordinateGetter: sortableKeyboardCoordinates,\n    }));\n    return (<DndContext sensors={sensors} collisionDetection={closestCenter} onDragEnd={handleDragEnd}>\r\n\t\t\t<SortableContext items={selected.map(s => s.value)} strategy={verticalListSortingStrategy}>\r\n\t\t\t\t<Select isMulti options={options} value={selected} onChange={selectedOptions => setSelected(selectedOptions)} components={{\n            MultiValue: SortableMultiValue,\n            MultiValueLabel: SortableMultiValueLabel,\n        }} theme={theme => ({\n            ...theme,\n            borderRadius: 0,\n            colors: {\n                ...theme.colors,\n                primary: '#9ec5fe',\n                neutral20: '#1d1d1d',\n                neutral30: '#0d6efd',\n            },\n        })} styles={{\n            ...customStyles,\n        }} {...props}/>\r\n\t\t\t</SortableContext>\r\n\t\t</DndContext>);\n};\nexport default MultiSelectDrag;\n"
			},
			{
				"fileName": "index.js",
				"content": "/**\n * WordPress dependencies\n */\nimport { registerBlockType } from '@wordpress/blocks';\n/**\n * Internal dependencies\n */\nimport json from './block.json';\nimport edit from './edit';\nimport save from './save';\n// import './editor.scss';\n// import './style.scss';\n// Destructure the json file to get the name and settings for the block\n// For more information on how this works, see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\nconst { name } = json;\n// Register the block\nregisterBlockType(name, {\n    edit, // Object shorthand property - same as writing: edit: edit,\n    save, // Object shorthand property - same as writing: save: save,\n});\n"
			},
			{
				"fileName": "save.js",
				"content": "/**\n * See https://wordpress.org/gutenberg/handbook/designers-developers/developers/block-api/block-edit-save/#save\n *\n * @return {null} Dynamic blocks do not save the HTML.\n */\nconst Save = () => null;\nexport default Save;\n"
			}
		],
		"typescript": [
			{
				"fileName": "edit.tsx",
				"content": "/**\r\n * React dependencies\r\n */\r\nimport React, { useState } from 'react';\r\n\r\n/**\r\n * External dependencies\r\n */\r\nimport { closestCenter, DndContext, DragEndEvent, KeyboardSensor, PointerSensor, useSensor, useSensors } from '@dnd-kit/core';\r\nimport { arrayMove, SortableContext, sortableKeyboardCoordinates, useSortable, verticalListSortingStrategy } from '@dnd-kit/sortable';\r\nimport { CSS } from '@dnd-kit/utilities';\r\nimport Select, { components } from 'react-select';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { CustomStyles, Option, SelectProps, SortableMultiValueLabelProps, SortableMultiValueProps } from './types';\r\n\r\nconst customStyles: CustomStyles = {\r\n\tmultiValue: provided => ({\r\n\t\t...provided,\r\n\t\tjustifyContent: 'space-between',\r\n\t}),\r\n\tmultiValueLabel: provided => ({\r\n\t\t...provided,\r\n\t\tpadding: '6px',\r\n\t}),\r\n\tvalueContainer: provided => ({\r\n\t\t...provided,\r\n\t\tpadding: '2px 0 2px 8px',\r\n\t\tgap: '3px',\r\n\t}),\r\n\toption: (provided, state) => ({\r\n\t\t...provided,\r\n\t\topacity: state.isDisabled ? '0.4' : '1',\r\n\t}),\r\n};\r\n\r\nconst options: Option[] = Array.from({ length: 10 }, (_, index) => ({\r\n\tlabel: `option-${index}`,\r\n\tvalue: `option-${index}`,\r\n}));\r\n\r\nconst SortableMultiValueLabel = (props: SortableMultiValueLabelProps) => {\r\n\tconst { attributes, listeners } = useSortable({ id: props.data.value });\r\n\r\n\treturn (\r\n\t\t<div style={{ width: '100%' }} {...attributes} {...listeners}>\r\n\t\t\t<components.MultiValueLabel {...props} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst SortableMultiValue = (props: SortableMultiValueProps) => {\r\n\tconst { setNodeRef, transform, transition } = useSortable({\r\n\t\tid: props.data.value,\r\n\t});\r\n\r\n\tconst style = {\r\n\t\tdisplay: 'flex',\r\n\t\talignItems: 'center',\r\n\t\ttransform: CSS.Transform.toString(transform),\r\n\t\ttransition,\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div ref={setNodeRef} style={style}>\r\n\t\t\t<components.MultiValue {...props} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst MultiSelectDrag = ({ ...props }: SelectProps) => {\r\n\tconst [selected, setSelected] = useState<Option[]>(options);\r\n\r\n\tconst handleDragEnd = ({ active, over }: DragEndEvent) => {\r\n\t\tif (active.id !== over?.id) {\r\n\t\t\tconst oldIndex = selected.findIndex(i => i.value === active.id);\r\n\t\t\tconst newIndex = over ? selected.findIndex(i => i.value === over.id) : selected.length - 1;\r\n\r\n\t\t\tsetSelected(arrayMove(selected, oldIndex, newIndex));\r\n\t\t}\r\n\t};\r\n\r\n\tconst sensors = useSensors(\r\n\t\tuseSensor(PointerSensor),\r\n\t\tuseSensor(KeyboardSensor, {\r\n\t\t\tcoordinateGetter: sortableKeyboardCoordinates,\r\n\t\t}),\r\n\t);\r\n\r\n\treturn (\r\n\t\t<DndContext sensors={sensors} collisionDetection={closestCenter} onDragEnd={handleDragEnd}>\r\n\t\t\t<SortableContext items={selected.map(s => s.value)} strategy={verticalListSortingStrategy}>\r\n\t\t\t\t<Select\r\n\t\t\t\t\tisMulti\r\n\t\t\t\t\toptions={options}\r\n\t\t\t\t\tvalue={selected}\r\n\t\t\t\t\tonChange={selectedOptions => setSelected(selectedOptions as Option[])}\r\n\t\t\t\t\tcomponents={{\r\n\t\t\t\t\t\tMultiValue: SortableMultiValue,\r\n\t\t\t\t\t\tMultiValueLabel: SortableMultiValueLabel,\r\n\t\t\t\t\t}}\r\n\t\t\t\t\ttheme={theme => ({\r\n\t\t\t\t\t\t...theme,\r\n\t\t\t\t\t\tborderRadius: 0,\r\n\t\t\t\t\t\tcolors: {\r\n\t\t\t\t\t\t\t...theme.colors,\r\n\t\t\t\t\t\t\tprimary: '#9ec5fe',\r\n\t\t\t\t\t\t\tneutral20: '#1d1d1d',\r\n\t\t\t\t\t\t\tneutral30: '#0d6efd',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t})}\r\n\t\t\t\t\tstyles={{\r\n\t\t\t\t\t\t...customStyles,\r\n\t\t\t\t\t}}\r\n\t\t\t\t\t{...props}\r\n\t\t\t\t/>\r\n\t\t\t</SortableContext>\r\n\t\t</DndContext>\r\n\t);\r\n};\r\n\r\nexport default MultiSelectDrag;\r\n"
			},
			{
				"fileName": "index.ts",
				"content": "/**\r\n * WordPress dependencies\r\n */\r\nimport { registerBlockType } from '@wordpress/blocks';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport json from './block.json';\r\nimport edit from './edit';\r\nimport save from './save';\r\n\r\n// import './editor.scss';\r\n// import './style.scss';\r\n\r\n// Destructure the json file to get the name and settings for the block\r\n// For more information on how this works, see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\r\nconst { name } = json;\r\n\r\n// Register the block\r\nregisterBlockType(name, {\r\n\tedit, // Object shorthand property - same as writing: edit: edit,\r\n\tsave, // Object shorthand property - same as writing: save: save,\r\n});\r\n"
			},
			{
				"fileName": "save.ts",
				"content": "/**\r\n * See https://wordpress.org/gutenberg/handbook/designers-developers/developers/block-api/block-edit-save/#save\r\n *\r\n * @return {null} Dynamic blocks do not save the HTML.\r\n */\r\n\r\nconst Save = () => null;\r\n\r\nexport default Save;\r\n"
			}
		]
	}
}
