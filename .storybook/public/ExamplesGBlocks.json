{
  "button": {
    "root": [
      {
        "fileName": "block.json",
        "content": "{\r\n\t\"$schema\": \"https://json.schemastore.org/block.json\",\r\n\t\"apiVersion\": 2,\r\n\t\"name\": \"storybook/button\",\r\n\t\"title\": \"Button\",\r\n\t\"icon\": \"money-alt\",\r\n\t\"category\": \"storybook\",\r\n\t\"attributes\": {\r\n\t\t\"text\": {\r\n\t\t\t\"type\": \"object\"\r\n\t\t}\r\n\t},\r\n\t\"editorScript\": \"file:index.js\",\r\n\t\"editorStyle\": \"file:index.css\",\r\n\t\"style\": \"file:style-index.css\",\r\n\t\"viewScript\": \"file:script.js\"\r\n}\r\n"
      },
      {
        "fileName": "index.php",
        "content": "<?php\r\n\r\nnamespace Storybook\\Blocks\\Button;\r\n\r\ndefined( 'ABSPATH' ) || exit;\r\n\r\n/**\r\n * Registers all block assets so that they can be enqueued through Gutenberg in\r\n * the corresponding context.\r\n *\r\n */\r\nfunction register_block() {\r\n\r\n\t// Register the block by passing the location of block.json to register_block_type.\r\n\tregister_block_type(\r\n\t\t__DIR__,\r\n\t\tarray(\r\n\t\t\t'render_callback' => __NAMESPACE__ . '\\\\render_block',\r\n\t\t)\r\n\t);\r\n}\r\n\r\nadd_action( 'init', __NAMESPACE__ . '\\\\register_block' );\r\n\r\nfunction render_block( $attributes, $content, $block ) {\r\n\tob_start(); ?>\r\n\r\n\t<Button>123</Button>\r\n\r\n <?php \t\r\n return ob_get_clean();\r\n}"
      }
    ],
    "javascript": [
      {
        "fileName": "edit.js",
        "content": "<div></div>;\r\n"
      }
    ],
    "typescript": [
      {
        "fileName": "edit.tsx",
        "content": "/**\r\n * React dependency\r\n */\r\nimport React, { ReactElement } from 'react';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport { Button as GButton } from '@wordpress/components';\r\nimport { ButtonProps } from './types';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\n\r\n/** Primary UI component */\r\nconst Button = ({ label, ...props }: ButtonProps): ReactElement => {\r\n\treturn <GButton {...props}>{label ?? 'Label'}</GButton>;\r\n};\r\n\r\nexport default Button;\r\n"
      },
      {
        "fileName": "index.ts",
        "content": "/**\r\n * WordPress dependencies\r\n */\r\nimport { BlockConfiguration, registerBlockType } from '@wordpress/blocks';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport json from './block.json';\r\nimport edit from './edit';\r\nimport save from './save';\r\n\r\n// If you want use styles, it add them to the current directory\r\n// import './editor.scss';\r\n// import './style.scss';\r\n\r\n// Destructure the json file to get the name and settings for the block\r\nconst blockConfig = json as BlockConfiguration;\r\n\r\n// Ensure name is a string before calling registerBlockType\r\nif (typeof blockConfig.name === 'string') {\r\n\t// Register the block with proper typing for block configuration\r\n\tregisterBlockType(blockConfig.name, {\r\n\t\t...blockConfig,\r\n\t\tedit, // Object shorthand property - same as writing: edit: edit,\r\n\t\tsave, // Object shorthand property - same as writing: save: save,\r\n\t});\r\n} else {\r\n\tconsole.error('Block name is undefined or not a string');\r\n}\r\n"
      },
      {
        "fileName": "save.ts",
        "content": "/**\r\n * See https://wordpress.org/gutenberg/handbook/designers-developers/developers/block-api/block-edit-save/#save\r\n *\r\n * @return {null} Dynamic blocks do not save the HTML.\r\n */\r\n\r\nconst Save = () => null\r\n\r\nexport default Save\r\n"
      },
      {
        "fileName": "types.ts",
        "content": "export type ButtonProps = {\r\n\t/**\r\n\t * An accessible description for the button.\r\n\t */\r\n\tdescribedBy?: string;\r\n\t/**\r\n\t *  Whether the button is disabled. If true, this will force a button element to be rendered, even when an href is given.\r\n\t */\r\n\tdisabled?: boolean;\r\n\t/**\r\n\t * If provided, renders a instead of button.\r\n\t */\r\n\thref?: string;\r\n\t/**\r\n\t * If provided, renders an Icon component inside the button.\r\n\t */\r\n\t// icon: IconProps<unknown>['icon'];\r\n\t/**\r\n\t * If provided with `icon`, sets the position of icon relative to the `text`.\r\n\t *\r\n\t * @default 'left'\r\n\t */\r\n\ticonPosition?: 'left' | 'right';\r\n\t/**\r\n\t * If provided with icon, sets the icon size. Please refer to the Icon component for more details regarding the default value of its size prop.\r\n\t */\r\n\t// iconSize: IconProps<unknown>['size'];\r\n\t/**\r\n\t * Indicates activity while a action is being performed.\r\n\t */\r\n\tisBusy?: boolean;\r\n\t/**\r\n\t *  Renders a red text-based button style to indicate destructive behavior.\r\n\t */\r\n\tisDestructive?: boolean;\r\n\t/**\r\n\t * Deprecated: Renders a button with an anchor style. Use variant prop with link value instead.\r\n\t */\r\n\tisLink?: boolean;\r\n\t/**\r\n\t * Renders a pressed button style. If the native aria-pressed attribute is also set, it will take precedence.\r\n\t */\r\n\tisPressed?: boolean;\r\n\t/**\r\n\t * Deprecated: Renders a primary button style. Use variant prop with primary value instead.\r\n\t */\r\n\tisPrimary?: boolean;\r\n\t/**\r\n\t * Deprecated: Renders a default button style. Use variant prop with secondary value instead.\r\n\t */\r\n\tisSecondary?: boolean;\r\n\t/**\r\n\t * Decreases the size of the button. Deprecated in favor of the size prop. If both props are defined, the size prop will take precedence.\r\n\t */\r\n\tisSmall?: boolean;\r\n\t/**\r\n\t * Deprecated: Renders a text-based button style. Use variant prop with tertiary value instead.\r\n\t */\r\n\tisTertiary?: boolean;\r\n\t/**\r\n\t * Sets the aria-label of the component, if none is provided. Sets the Tooltip content if showTooltip is provided.\r\n\t */\r\n\tlabel?: string;\r\n\t/**\r\n\t * If provided with `showTooltip`, appends the Shortcut label to the tooltip content.\r\n\t * If an object is provided, it should contain `display` and `ariaLabel` keys.\r\n\t *\r\n\t */\r\n\tshortcut?: string | { display: string; ariaLabel: string };\r\n\t/**\r\n\t * If provided, renders a Tooltip component for the button.\r\n\t */\r\n\tshowTooltip?: boolean;\r\n\t/**\r\n\t * The size of the button.\r\n\t *\r\n\t * - `'default'`: For normal text-label buttons, unless it is a toggle button.\r\n\t * - `'compact'`: For toggle buttons, icon buttons, and buttons when used in context of either.\r\n\t * - `'small'`: For icon buttons associated with more advanced or auxiliary features.\r\n\t *\r\n\t * If the deprecated `isSmall` prop is also defined, this prop will take precedence.\r\n\t *\r\n\t * @default 'default'\r\n\t */\r\n\tsize?: 'default' | 'compact' | 'small';\r\n\t/**\r\n\t * If provided with href, sets the target attribute to the a.\r\n\t */\r\n\ttarget?: string;\r\n\t/**\r\n\t * If provided, displays the given text inside the button. If the button contains children elements, the text is displayed before them.\r\n\t */\r\n\ttext?: string;\r\n\t/**\r\n\t * If provided with show Tooltip, sets the position of the tooltip. Please refer to the Tooltip component for more details regarding the defaults.\r\n\t */\r\n\t// tooltipPosition: PopoverProps['position'];\r\n\t/**\r\n\t * Specifies the button's style.\r\n\t * The accepted values are:\r\n\t * 'primary' (the primary button styles)\r\n\t * 'secondary' (the default button styles)\r\n\t * 'tertiary' (the text-based button styles)\r\n\t * 'link' (the link button styles)\r\n\t */\r\n\tvariant?: 'primary' | 'secondary' | 'tertiary' | 'link';\r\n};\r\n"
      }
    ]
  },
  "toolbar": {
    "root": [
      {
        "fileName": "block.json",
        "content": "{\r\n\t\"$schema\": \"https://json.schemastore.org/block.json\",\r\n\t\"apiVersion\": 2,\r\n\t\"name\": \"storybook/toolbar\",\r\n\t\"title\": \"Toolbar\",\r\n\t\"icon\": \"money-alt\",\r\n\t\"category\": \"storybook\",\r\n\t\"attributes\": {\r\n\t\t\"text\": {\r\n\t\t\t\"type\": \"object\"\r\n\t\t}\r\n\t},\r\n\t\"editorScript\": \"file:index.js\",\r\n\t\"editorStyle\": \"file:index.css\",\r\n\t\"style\": \"file:style-index.css\",\r\n\t\"viewScript\": \"file:script.js\"\r\n}\r\n"
      },
      {
        "fileName": "index.php",
        "content": "<?php\r\n\r\nnamespace Storybook\\Blocks\\Toolbar;\r\n\r\ndefined( 'ABSPATH' ) || exit;\r\n\r\n/**\r\n * Registers all block assets so that they can be enqueued through Gutenberg\r\n * in the corresponding context.\r\n */\r\nfunction register_block() {\r\n\t// Register the block by passing the location of block.json to register_block_type\r\n\tregister_block_type(\r\n\t\t__DIR__,\r\n\t\tarray(\r\n\t\t\t'render_callback' => __NAMESPACE__ . '\\\\render_block',\r\n\t\t)\r\n\t);\r\n}\r\n\r\nadd_action( 'init', __NAMESPACE__ . '\\\\register_block' );\r\n\r\nfunction render_block( $attributes ) {\r\n\tob_start();\r\n\t?>\r\n\r\n\t<?php\r\n\treturn ob_get_clean();\r\n}\r\n"
      }
    ],
    "typescript": [
      {
        "fileName": "edit.tsx",
        "content": "/**\r\n * React dependency\r\n */\r\nimport React, { ReactElement } from 'react';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport { DropdownMenu, Toolbar as GToolbar, ToolbarButton, ToolbarDropdownMenu, ToolbarGroup, ToolbarItem } from '@wordpress/components';\r\nimport {\r\n\talignCenter,\r\n\talignLeft,\r\n\talignRight,\r\n\tarrowDown,\r\n\tarrowLeft,\r\n\tarrowRight,\r\n\tarrowUp,\r\n\tchevronDown,\r\n\tformatBold,\r\n\tformatItalic,\r\n\tlink,\r\n\tmore,\r\n\tparagraph,\r\n} from '@wordpress/icons';\r\n\r\n/** Primary UI component */\r\nconst Toolbar = (): ReactElement => {\r\n\treturn (\r\n\t\t<GToolbar label='Options'>\r\n\t\t\t<>\r\n\t\t\t\t<ToolbarGroup>\r\n\t\t\t\t\t<ToolbarButton icon={paragraph} text='Paragraph' />\r\n\t\t\t\t</ToolbarGroup>\r\n\r\n\t\t\t\t<ToolbarGroup>\r\n\t\t\t\t\t<ToolbarItem>\r\n\t\t\t\t\t\t{toggleProps => (\r\n\t\t\t\t\t\t\t<DropdownMenu\r\n\t\t\t\t\t\t\t\ticon={alignLeft}\r\n\t\t\t\t\t\t\t\tlabel='Align'\r\n\t\t\t\t\t\t\t\tcontrols={[\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\ticon: alignLeft,\r\n\t\t\t\t\t\t\t\t\t\ttitle: 'Align left',\r\n\t\t\t\t\t\t\t\t\t\tisActive: true,\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\ticon: alignCenter,\r\n\t\t\t\t\t\t\t\t\t\ttitle: 'Align center',\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\ticon: alignRight,\r\n\t\t\t\t\t\t\t\t\t\ttitle: 'Align right',\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t]}\r\n\t\t\t\t\t\t\t\ttoggleProps={toggleProps}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</ToolbarItem>\r\n\t\t\t\t</ToolbarGroup>\r\n\r\n\t\t\t\t<ToolbarGroup>\r\n\t\t\t\t\t<ToolbarButton>Text</ToolbarButton>\r\n\t\t\t\t\t<ToolbarButton icon={formatBold} label='Bold' isPressed />\r\n\t\t\t\t\t<ToolbarButton icon={formatItalic} label='Italic' />\r\n\t\t\t\t\t<ToolbarButton icon={link} label='Link' />\r\n\t\t\t\t</ToolbarGroup>\r\n\r\n\t\t\t\t<ToolbarGroup\r\n\t\t\t\t\ticon={more}\r\n\t\t\t\t\ttitle='Align'\r\n\t\t\t\t\tisCollapsed\r\n\t\t\t\t\tcontrols={[\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ticon: alignLeft,\r\n\t\t\t\t\t\t\ttitle: 'Align left',\r\n\t\t\t\t\t\t\tisActive: true,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{ icon: alignCenter, title: 'Align center' },\r\n\t\t\t\t\t\t{ icon: alignRight, title: 'Align right' },\r\n\t\t\t\t\t]}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<ToolbarDropdownMenu\r\n\t\t\t\t\ticon={chevronDown}\r\n\t\t\t\t\tlabel='Select a direction'\r\n\t\t\t\t\tcontrols={[\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttitle: 'Up',\r\n\t\t\t\t\t\t\ticon: arrowUp,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttitle: 'Right',\r\n\t\t\t\t\t\t\ticon: arrowRight,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttitle: 'Down',\r\n\t\t\t\t\t\t\ticon: arrowDown,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttitle: 'Left',\r\n\t\t\t\t\t\t\ticon: arrowLeft,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t]}\r\n\t\t\t\t/>\r\n\t\t\t</>\r\n\t\t</GToolbar>\r\n\t);\r\n};\r\n\r\nexport default Toolbar;\r\n"
      },
      {
        "fileName": "index.ts",
        "content": "/**\r\n * WordPress dependencies\r\n */\r\nimport { registerBlockType } from '@wordpress/blocks';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport json from './block.json';\r\nimport edit from './edit';\r\nimport save from './save';\r\n\r\n// import './editor.scss';\r\n// import './style.scss';\r\n\r\n// Destructure the json file to get the name and settings for the block\r\n// For more information on how this works, see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\r\nconst { name } = json;\r\n\r\n// Register the block\r\nregisterBlockType(name, {\r\n\tedit, // Object shorthand property - same as writing: edit: edit,\r\n\tsave, // Object shorthand property - same as writing: save: save,\r\n});\r\n"
      },
      {
        "fileName": "save.ts",
        "content": "/**\r\n * See https://wordpress.org/gutenberg/handbook/designers-developers/developers/block-api/block-edit-save/#save\r\n *\r\n * @return {null} Dynamic blocks do not save the HTML.\r\n */\r\n\r\nconst Save = () => null;\r\n\r\nexport default Save;\r\n"
      }
    ]
  },
  "link": {
    "root": [
      {
        "fileName": "block.json",
        "content": "{\r\n\t\"$schema\": \"https://json.schemastore.org/block.json\",\r\n\t\"apiVersion\": 2,\r\n\t\"name\": \"storybook/custom-link\",\r\n\t\"title\": \"Custom Link\",\r\n\t\"icon\": \"admin-links\",\r\n\t\"category\": \"storybook\",\r\n\t\"attributes\": {\r\n\t\t\"link\": {\r\n\t\t\t\"type\": \"object\",\r\n\t\t\t\"default\": {\r\n\t\t\t\t\"url\": \"\",\r\n\t\t\t\t\"title\": \"\",\r\n\t\t\t\t\"type\": \"URL\",\r\n\t\t\t\t\"opensInNewTab\": false\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"text\": {\r\n\t\t\t\"type\": \"string\",\r\n\t\t\t\"default\": \"Click here\"\r\n\t\t}\r\n\t},\r\n\t\"supports\": {\r\n\t\t\"customClassName\": true,\r\n\t\t\"multiple\": true\r\n\t},\r\n\t\"editorScript\": \"file:index.js\",\r\n\t\"editorStyle\": \"file:index.css\",\r\n\t\"style\": \"file:style-index.css\",\r\n\t\"viewScript\": \"file:script.js\"\r\n}\r\n"
      },
      {
        "fileName": "button.php",
        "content": "<?php\r\n/**\r\n * Button markup\r\n *\r\n * @var array $args\r\n */\r\n\r\n$text       = $args['text'] ?? esc_html__( 'Click here', 'rscm' );\r\n$tag        = $args['tag'] ?? 'a';\r\n$href       = $args['href'] ?? '#';\r\n$target     = $args['target'] ?? '';\r\n$rel        = $args['rel'] ?? '';\r\n$markup     = $args['markup'] ?? '';\r\n\r\n$content = '';\r\n\r\nif ( $markup ) {\r\n\t$content = $markup;\r\n} else {\r\n\t$content .= $text_class ? wp_sprintf( '<span class=\"%s\">%s</span>', $text_class, $text ) : $text;\r\n}\r\n?>\r\n\r\n<<?php echo wp_kses_post( $tag ); ?>\r\n\t<?php if ( $tag === 'a' ) : ?>\r\n\t\thref=\"<?php echo esc_url( $href ); ?>\"\r\n\t<?php endif; ?>\r\n\r\n\t<?php if ( $target ) : ?>\r\n\t\ttarget=\"<?php echo esc_attr( $target ); ?>\"\r\n\t<?php endif; ?>\r\n\r\n\t<?php if ( $rel ) : ?>\r\n\t\trel=\"<?php echo esc_attr( $rel ); ?>\"\r\n\t<?php endif; ?>\r\n\r\n\t<?php if ( $attrs ) : ?>\r\n\t\t<?php foreach ( $attrs as $key => $attr ) : ?>\r\n\t\t\t<?php echo wp_kses_post( $key ) . '=\"' . esc_attr( $attr ) . '\"'; ?>\r\n\t\t<?php endforeach; ?>\r\n\t<?php endif; ?>\r\n>\r\n<?php echo wp_kses_post( $content ); ?>\r\n</<?php echo wp_kses_post( $tag ); ?>>\r\n"
      },
      {
        "fileName": "index.php",
        "content": "<?php\r\n\r\nnamespace Storybook\\Blocks\\CustomLink;\r\n\r\ndefined( 'ABSPATH' ) || exit;\r\n\r\n/**\r\n * Registers all block assets so that they can be enqueued through Gutenberg\r\n * in the corresponding context.\r\n */\r\nfunction register_block() {\r\n\t// Register the block by passing the location of block.json to register_block_type\r\n\tregister_block_type(\r\n\t\t__DIR__,\r\n\t\tarray(\r\n\t\t\t'render_callback' => __NAMESPACE__ . '\\\\render_block',\r\n\t\t)\r\n\t);\r\n}\r\n\r\nadd_action( 'init', __NAMESPACE__ . '\\\\register_block' );\r\n\r\nfunction render_block( $attributes ) {\r\n\t$text     = $attributes['text'] ?? '';\r\n\t$url_date = $attributes['link'] ?? [];\r\n\r\n\tob_start();\r\n\t?>\r\n\t<p>\r\n\t\t<?php\r\n\t\tif ( $text ) :\r\n\t\t\t$url    = $url_date['url'] ?? '';\r\n\t\t\t$target = $url_date['opensInNewTab'] ?? false;\r\n\r\n\t\t\tget_template_part(\r\n\t\t\t\t'button',\r\n\t\t\t\tnull,\r\n\t\t\t\t[\r\n\t\t\t\t\t'href'   => ! empty( $url ) ? $url : '/',\r\n\t\t\t\t\t'target' => $target,\r\n\t\t\t\t\t'markup' => $text,\r\n\t\t\t\t]\r\n\t\t\t);\r\n\t\tendif;\r\n\t\t?>\r\n\t</p>\r\n\t<?php\r\n\treturn ob_get_clean();\r\n}\r\n"
      }
    ],
    "typescript": [
      {
        "fileName": "edit.tsx",
        "content": "/**\r\n * React dependency\r\n */\r\nimport React, { useState } from 'react';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport { __experimentalLinkControl as LinkControl, RichText, useBlockProps } from '@wordpress/block-editor';\r\nimport { Popover, ToolbarButton } from '@wordpress/components';\r\nimport { BlockControls } from '@wordpress/editor';\r\nimport { __ } from '@wordpress/i18n';\r\nimport { customLink } from '@wordpress/icons';\r\n\r\ninterface CustomLinkProps {\r\n\tattributes: {\r\n\t\tlink: string;\r\n\t\ttext: string;\r\n\t};\r\n\tsetAttributes: any;\r\n}\r\n\r\nconst CustomLink = (props: CustomLinkProps) => {\r\n\tconst {\r\n\t\tattributes: { link, text },\r\n\t\tsetAttributes,\r\n\t} = props;\r\n\r\n\tconst [isVisible, setIsVisible] = useState(true);\r\n\r\n\tconst toggleVisible = () => {\r\n\t\tsetIsVisible(state => !state);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div {...useBlockProps()}>\r\n\t\t\t<BlockControls>\r\n\t\t\t\t<ToolbarButton className={'components-button-link'} label={__('Add link', 'rscm')} icon={customLink} onClick={toggleVisible} />\r\n\t\t\t</BlockControls>\r\n\r\n\t\t\t<p className={'rscm-custom-link'}>\r\n\t\t\t\t<RichText\r\n\t\t\t\t\tplaceholder={__('Add text...', 'rscm')}\r\n\t\t\t\t\tallowedFormats={['core/bold', 'core/italic']}\r\n\t\t\t\t\tonChange={text => setAttributes({ text })}\r\n\t\t\t\t\tvalue={text}\r\n\t\t\t\t/>\r\n\t\t\t</p>\r\n\r\n\t\t\t{isVisible && (\r\n\t\t\t\t<Popover onFocusOutside={toggleVisible}>\r\n\t\t\t\t\t<LinkControl\r\n\t\t\t\t\t\tvalue={link}\r\n\t\t\t\t\t\tonChange={link => {\r\n\t\t\t\t\t\t\tsetAttributes({ link });\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Popover>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CustomLink;\r\n"
      },
      {
        "fileName": "index.ts",
        "content": "/**\r\n * WordPress dependencies\r\n */\r\nimport { registerBlockType } from '@wordpress/blocks';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport json from './block.json';\r\nimport edit from './edit';\r\nimport save from './save';\r\n\r\n// import './editor.scss';\r\n// import './style.scss';\r\n\r\n// Destructure the json file to get the name and settings for the block\r\n// For more information on how this works, see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\r\nconst { name } = json;\r\n\r\n// Register the block\r\nregisterBlockType(name, {\r\n\tedit, // Object shorthand property - same as writing: edit: edit,\r\n\tsave, // Object shorthand property - same as writing: save: save,\r\n});\r\n"
      },
      {
        "fileName": "save.ts",
        "content": "/**\r\n * See https://wordpress.org/gutenberg/handbook/designers-developers/developers/block-api/block-edit-save/#save\r\n *\r\n * @return {null} Dynamic blocks do not save the HTML.\r\n */\r\n\r\nconst Save = () => null;\r\n\r\nexport default Save;\r\n"
      }
    ]
  },
  "mutliSelectDrag": {
    "typescript": [
      {
        "fileName": "edit.tsx",
        "content": "/**\r\n * React dependencies\r\n */\r\nimport React, { useState } from 'react';\r\n\r\n/**\r\n * External dependencies\r\n */\r\nimport { closestCenter, DndContext, DragEndEvent, KeyboardSensor, PointerSensor, useSensor, useSensors } from '@dnd-kit/core';\r\nimport { arrayMove, SortableContext, sortableKeyboardCoordinates, useSortable, verticalListSortingStrategy } from '@dnd-kit/sortable';\r\nimport { CSS } from '@dnd-kit/utilities';\r\nimport Select, { components } from 'react-select';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { CustomStyles, Option, SelectProps, SortableMultiValueLabelProps, SortableMultiValueProps } from './types';\r\n\r\nconst customStyles: CustomStyles = {\r\n\tmultiValue: provided => ({\r\n\t\t...provided,\r\n\t\tjustifyContent: 'space-between',\r\n\t}),\r\n\tmultiValueLabel: provided => ({\r\n\t\t...provided,\r\n\t\tpadding: '6px',\r\n\t}),\r\n\tvalueContainer: provided => ({\r\n\t\t...provided,\r\n\t\tpadding: '2px 0 2px 8px',\r\n\t\tgap: '3px',\r\n\t}),\r\n\toption: (provided, state) => ({\r\n\t\t...provided,\r\n\t\topacity: state.isDisabled ? '0.4' : '1',\r\n\t}),\r\n\tmenu: provided => ({\r\n\t\t...provided,\r\n\t\tposition: 'fixed', // Change position to 'fixed'\r\n\t\tzIndex: 9999, // Set a high z-index value\r\n\t\ttop: '50%', // Adjust the vertical position as needed\r\n\t\tleft: '50%', // Adjust the horizontal position as needed\r\n\t\ttransform: 'translate(-50%, -50%)', // Center the menu\r\n\t}),\r\n};\r\n\r\nconst options: Option[] = Array.from({ length: 10 }, (_, index) => ({\r\n\tlabel: `option-${index}`,\r\n\tvalue: `option-${index}`,\r\n}));\r\n\r\nconst SortableMultiValueLabel = (props: SortableMultiValueLabelProps) => {\r\n\tconst { attributes, listeners } = useSortable({ id: props.data.value });\r\n\r\n\treturn (\r\n\t\t<div style={{ width: '100%' }} {...attributes} {...listeners}>\r\n\t\t\t<components.MultiValueLabel {...props} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst SortableMultiValue = (props: SortableMultiValueProps) => {\r\n\tconst { setNodeRef, transform, transition } = useSortable({\r\n\t\tid: props.data.value,\r\n\t});\r\n\r\n\tconst style = {\r\n\t\tdisplay: 'flex',\r\n\t\talignItems: 'center',\r\n\t\ttransform: CSS.Transform.toString(transform),\r\n\t\ttransition,\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div ref={setNodeRef} style={style}>\r\n\t\t\t<components.MultiValue {...props} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst SelectDrag = ({ ...props }: SelectProps) => {\r\n\tconst [selected, setSelected] = useState<Option[]>(options);\r\n\r\n\tconst handleDragEnd = ({ active, over }: DragEndEvent) => {\r\n\t\tif (active.id !== over?.id) {\r\n\t\t\tconst oldIndex = selected.findIndex(i => i.value === active.id);\r\n\t\t\tconst newIndex = over ? selected.findIndex(i => i.value === over.id) : selected.length - 1;\r\n\r\n\t\t\tsetSelected(arrayMove(selected, oldIndex, newIndex));\r\n\t\t}\r\n\t};\r\n\r\n\tconst sensors = useSensors(\r\n\t\tuseSensor(PointerSensor),\r\n\t\tuseSensor(KeyboardSensor, {\r\n\t\t\tcoordinateGetter: sortableKeyboardCoordinates,\r\n\t\t}),\r\n\t);\r\n\r\n\treturn (\r\n\t\t<DndContext sensors={sensors} collisionDetection={closestCenter} onDragEnd={handleDragEnd}>\r\n\t\t\t<SortableContext items={selected.map(s => s.value)} strategy={verticalListSortingStrategy}>\r\n\t\t\t\t<Select\r\n\t\t\t\t\t{...props}\r\n\t\t\t\t\toptions={options}\r\n\t\t\t\t\tvalue={selected}\r\n\t\t\t\t\tonChange={selectedOptions => setSelected(selectedOptions as Option[])}\r\n\t\t\t\t\tcomponents={{\r\n\t\t\t\t\t\tMultiValue: SortableMultiValue,\r\n\t\t\t\t\t\tMultiValueLabel: SortableMultiValueLabel,\r\n\t\t\t\t\t}}\r\n\t\t\t\t\ttheme={theme => ({\r\n\t\t\t\t\t\t...theme,\r\n\t\t\t\t\t\tborderRadius: 0,\r\n\t\t\t\t\t\tcolors: {\r\n\t\t\t\t\t\t\t...theme.colors,\r\n\t\t\t\t\t\t\tprimary: '#9ec5fe',\r\n\t\t\t\t\t\t\tneutral20: '#1d1d1d',\r\n\t\t\t\t\t\t\tneutral30: '#0d6efd',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t})}\r\n\t\t\t\t\tstyles={{\r\n\t\t\t\t\t\t...customStyles,\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</SortableContext>\r\n\t\t</DndContext>\r\n\t);\r\n};\r\n\r\nexport default SelectDrag;\r\n"
      },
      {
        "fileName": "index.ts",
        "content": "/**\r\n * WordPress dependencies\r\n */\r\nimport { registerBlockType } from '@wordpress/blocks';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport json from './block.json';\r\nimport edit from './edit';\r\nimport save from './save';\r\n\r\n// import './editor.scss';\r\n// import './style.scss';\r\n\r\n// Destructure the json file to get the name and settings for the block\r\n// For more information on how this works, see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\r\nconst { name } = json;\r\n\r\n// Register the block\r\nregisterBlockType(name, {\r\n\tedit, // Object shorthand property - same as writing: edit: edit,\r\n\tsave, // Object shorthand property - same as writing: save: save,\r\n});\r\n"
      },
      {
        "fileName": "save.ts",
        "content": "/**\r\n * See https://wordpress.org/gutenberg/handbook/designers-developers/developers/block-api/block-edit-save/#save\r\n *\r\n * @return {null} Dynamic blocks do not save the HTML.\r\n */\r\n\r\nconst Save = () => null;\r\n\r\nexport default Save;\r\n"
      },
      {
        "fileName": "types.ts",
        "content": "/**\r\n * External dependencies\r\n */\r\nimport { GroupBase, MultiValueGenericProps, MultiValueProps, StylesConfig } from 'react-select';\r\n\r\nexport interface SelectProps {\r\n\t/**\r\n\t * Focus the control when it is mounted\r\n\t */\r\n\tautoFocus?: boolean;\r\n\t/**\r\n\t * Remove the currently focused option when the user presses backspace when Select isClearable or isMulti\r\n\t */\r\n\tbackspaceRemovesValue: boolean;\r\n\t/**\r\n\t * Remove focus from the input when the user selects an option (handy for dismissing the keyboard on touch devices)\r\n\t */\r\n\tblurInputOnSelect: boolean;\r\n\t/**\r\n\t * Close the select menu when the user selects an option\r\n\t */\r\n\tcloseMenuOnSelect: boolean;\r\n\t/**\r\n\t * Whether the value of the select, e.g. SingleValue, should be displayed in the control.\r\n\t */\r\n\tcontrolShouldRenderValue: boolean;\r\n\t/**\r\n\t * Hide the selected option from the menu\r\n\t */\r\n\thideSelectedOptions?: boolean;\r\n\t/**\r\n\t * Is the select value clearable\r\n\t */\r\n\tisClearable?: boolean;\r\n\t/**\r\n\t * Is the select disabled\r\n\t */\r\n\tisDisabled: boolean;\r\n\t/**\r\n\t * Is the select in a state of loading (async)\r\n\t */\r\n\tisLoading: boolean;\r\n\t/**\r\n\t * Support multiple selected options\r\n\t */\r\n\tisMulti: boolean;\r\n\t/**\r\n\t * Is the select direction right-to-left\r\n\t */\r\n\tisRtl: boolean;\r\n\t/**\r\n\t * Whether to enable search functionality\r\n\t */\r\n\tisSearchable: boolean;\r\n\t/**\r\n\t * Minimum height of the menu before flipping\r\n\t */\r\n\tminMenuHeight: number;\r\n\t/**\r\n\t *  Maximum height of the menu before scrolling\r\n\t */\r\n\tmaxMenuHeight: number;\r\n\t/**\r\n\t * Whether the menu is open\r\n\t */\r\n\tmenuIsOpen: boolean;\r\n\t/**\r\n\t * The size of the button.\r\n\t *\r\n\t * - `'auto'`: For normal text-label buttons, unless it is a toggle button.\r\n\t * - `'bottom'`: For toggle buttons, icon buttons, and buttons when used in context of either.\r\n\t * - `'top'`: For icon buttons associated with more advanced or auxiliary features.\r\n\t *\r\n\t * If the deprecated `isSmall` prop is also defined, this prop will take precedence.\r\n\t *\r\n\t * @default 'auto'\r\n\t */\r\n\tmenuPlacement: 'auto' | 'bottom' | 'top';\r\n\t/**\r\n\t * The CSS position value of the menu, when \"fixed\" extra layout management is required\r\n\t */\r\n\tmenuPosition: 'absolute' | 'fixed';\r\n\t/**\r\n\t *  Whether to block scroll events when the menu is open\r\n\t */\r\n\tmenuShouldBlockScroll: boolean;\r\n\t/**\r\n\t * Whether the menu should be scrolled into view when it opens\r\n\t */\r\n\tmenuShouldScrollIntoView: boolean;\r\n\t/**\r\n\t * Allows control of whether the menu is opened when the Select is focused\r\n\t */\r\n\topenMenuOnFocus: boolean;\r\n\t/**\r\n\t * Allows control of whether the menu is opened when the Select is clicked\r\n\t */\r\n\topenMenuOnClick: boolean;\r\n\t/**\r\n\t * Remove all non-essential styles\r\n\t */\r\n\tunstyled: boolean;\r\n}\r\n\r\nexport interface Option {\r\n\tlabel: string;\r\n\tvalue: string;\r\n}\r\n\r\nexport type CustomStyles = StylesConfig<Option, true>;\r\n\r\nexport type SortableMultiValueLabelProps = MultiValueGenericProps<Option, true, GroupBase<Option>>;\r\n\r\nexport type SortableMultiValueProps = MultiValueProps<Option, true, GroupBase<Option>>;\r\n"
      }
    ]
  }
}